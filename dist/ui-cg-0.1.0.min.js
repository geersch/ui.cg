/*
 * cg-ui
 * https://github.com/geersch/ui.cg
 * Version: 0.1.0 - 2018-04-02
 * License: MIT
 */
angular.module("ui.cg",["ui.cg.tpls","ui.cg.focused","ui.cg.numberinput"]),angular.module("ui.cg.tpls",["template/numberinput/numberinput.html"]),angular.module("ui.cg.focused",[]).directive("focused",function(){return{restrict:"A",require:["ngModel"],link:function(a,b,c,d){function e(b){a.$apply(function(){f.$focused=b})}var f=d[0];f&&(f.$focused=!1,b.bind("focus",function(){e(!0)}),b.find("input").bind("focus",function(){e(!0)}),b.bind("blur",function(){e(!1)}),b.find("input").bind("blur",function(){e(!1)}))}}}),angular.module("ui.cg.numberinput",[]).constant("numberinputConfig",{decimalSeparator:".",decimals:2,step:1,keyboard:!0,mousewheel:!0,spinner:!0}).controller("NumberInputController",["$scope","$attrs","numberinputConfig",function(a,b,c){function d(b){if(!0!==a.disabled){var c=a.number;isNaN(c)&&(c=0);var d=0===k?1:parseInt("1"+Array(k+1).join("0"),10),c=Math.round((c+b)*d)/d;a.number=c,f()}}function e(){var a=l,b=0===k?1:parseFloat("0."+Array(k).join("0")+"1",10);return a<b&&(a=b),a}function f(){if(!angular.isUndefined(a.number)&&!isNaN(a.number)){var b=0===k?1:parseInt("1"+Array(k+1).join("0"),10);return angular.isDefined(a.maximum)&&!isNaN(a.maximum)&&Math.round(a.number*b)>Math.round(a.maximum*b)?void g(a.maximum):angular.isDefined(a.minimum)&&!isNaN(a.minimum)&&Math.round(a.number*b)<Math.round(a.minimum*b)?void g(a.minimum):void 0}}function g(b){isNaN(b)||(a.number=b)}var h,i=[38,40];this.init=function(d){var e=d.find("input").eq(0);if(h=e.controller("ngModel"),b.class){var f=b.class.split(" ").filter(function(a,b,c){return"input-append"!==a&&b===c.indexOf(a)});f&&f.length>0&&f.forEach(function(a){e.addClass(a),d.removeClass(a)})}(angular.isDefined(b.keyboard)?a.$eval(b.keyboard):c.keyboard)&&this.bindKeyboardEvents(e),(angular.isDefined(b.mousewheel)?a.$eval(b.mousewheel):c.mousewheel)&&this.bindMouseWheelEvents(e)},a.increment=function(){d(e())},a.decrement=function(){d(-1*e())},this.bindMouseWheelEvents=function(b){var c=function(a){a.originalEvent&&(a=a.originalEvent);var b=a.wheelDelta?a.wheelDelta:-a.deltaY;return a.detail||b>0};b.bind("mousewheel wheel",function(b){a.$apply(c(b)?a.increment():a.decrement()),b.preventDefault()})},this.bindKeyboardEvents=function(b){b.bind("keydown",function(b){-1!==i.indexOf(b.which)&&(b.stopPropagation(),40===b.which?a.decrement():38===b.which&&a.increment(),a.$apply())})},this.getDecimalSeparator=function(){return j};var j=c.decimalSeparator;b.decimalSeparator&&b.$observe("decimalSeparator",function(a){var b;b=angular.isDefined(a)&&0!==a.length?a[0]:c.decimalSeparator,j=b,h.$render()}),this.getDecimals=function(){return k};var k=c.decimals;b.decimals&&b.$observe("decimals",function(a){var b;b=angular.isUndefined(a)||isNaN(a)?c.decimals:parseInt(a,10),b<0&&(b=0),k=b,h.$render()});var l=c.step;b.step&&b.$observe("step",function(a){var b;b=angular.isUndefined(a)||isNaN(a)?c.step:parseFloat(a,10),l=b}),a.spinner=c.spinner,b.spinner&&b.$observe("spinner",function(b){a.spinner=!angular.isDefined(b)||a.$eval(b)}),b.maximum&&b.$observe("maximum",function(b){a.maximum=parseFloat(b,10)}),b.minimum&&b.$observe("minimum",function(b){a.minimum=parseFloat(b,10)}),this.checkValueBoundaries=f}]).directive("float",function(){return{restrict:"A",require:["^numberinput","^ngModel"],link:function(a,b,c,d){function e(a){function b(a){return a.replace(/[^-0-9]/g,"")}function c(a){return a.replace(/-/g,"")}var d=h.getDecimalSeparator(),e=h.getDecimals(),f=String(a).replace(".",d),g=f.indexOf(d);if(0===g)f="";else if(-1!==g){var i=f.substr(0,g),j=f.substr(g+1),k=b(i),l=b(j).substr(0,e);f=k+d+l}else f=b(f);if(-1!==(g=f.indexOf("-"))){var i,j;f=0===g?f.substr(0,1)+c(f.substr(1)):c(f)}return 0===e&&f.indexOf(d)===f.length-1&&(f=f.substr(0,f.length-1)),f}function f(a){if(angular.isUndefined(a)||0===a.length)return 0;var b=h.getDecimalSeparator(),c=parseFloat(a.replace(b,"."),10);return isNaN(c)&&(c=0),c}function g(a){if(!angular.isUndefined(a)&&0!==a.length){var b=e(a),c=f(b);return b!==a&&(i.$setViewValue(b),i.$render()),c}}var h=d[0],i=d[1];i.$parsers.unshift(g),i.$formatters.unshift(g),i.$render=function(){var a=h.getDecimalSeparator(),c=i.$viewValue;if(!i.$focused&&angular.isDefined(i.$modelValue)){var d=h.getDecimals();c=i.$modelValue.toFixed(d),c=c.replace(".",a)}b.val(c)},b.bind("blur",function(){a.$apply(function(){h.checkValueBoundaries()}),i.$render()})}}}).directive("numberinput",function(){return{restrict:"E",require:["numberinput"],controller:"NumberInputController",templateUrl:"template/numberinput/numberinput.html",replace:!0,scope:{number:"=ngModel",decimalSeparator:"@",decimals:"@",step:"@",disabled:"=ngDisabled"},link:function(a,b,c,d){d[0].init(b)}}}),angular.module("template/numberinput/numberinput.html",[]).run(["$templateCache",function(a){a.put("template/numberinput/numberinput.html",'<div class="input-append" focused>\n    <input type="text" class="input-mini" type="text" ng-model="number" float ng-disabled="disabled" focused>\n    <span class="btn-group" ng-show="spinner">\n        <button class="btn" type="button" ng-click="increment()" ng-disabled="disabled">\n            <i class="icon icon-chevron-up"></i>\n        </button>\n       <button class="btn" type="button" ng-click="decrement()" ng-disabled="disabled">\n           <i class="icon icon-chevron-down"></i>\n       </button>\n    </span>\n</div>')}]);